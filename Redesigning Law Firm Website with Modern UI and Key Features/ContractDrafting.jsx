import React, { useState, useRef, useEffect } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import { Button } from '@/components/ui/button.jsx'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Input } from '@/components/ui/input.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { 
  ArrowLeft,
  Send,
  Mic,
  MicOff,
  Paperclip,
  Download,
  Save,
  Share,
  Settings,
  Calendar,
  Upload,
  Image,
  FileText,
  User,
  Building,
  Signature,
  Eye,
  EyeOff,
  Languages,
  Zap,
  MessageSquare,
  Bot
} from 'lucide-react'

const ContractDrafting = () => {
  const location = useLocation()
  const navigate = useNavigate()
  const [message, setMessage] = useState('')
  const [isRecording, setIsRecording] = useState(false)
  const [showWatermark, setShowWatermark] = useState(true)
  const [language, setLanguage] = useState('english') // 'english', 'arabic', 'both'
  const messagesEndRef = useRef(null)

  // Get contract data from navigation state
  const contractData = location.state?.contractData || {
    type: { name: 'Corporate', color: 'bg-blue-500' },
    subType: { name: 'Articles of Association (LLC)', description: 'Limited liability company formation documents' }
  }

  // Contract details state
  const [contractDetails, setContractDetails] = useState({
    title: contractData.subType.name,
    effectiveDate: new Date().toISOString().split('T')[0],
    parties: [
      { name: '', role: 'First Party', signature: null },
      { name: '', role: 'Second Party', signature: null }
    ],
    companyLogo: null,
    backgroundImage: null,
    watermark: 'DALI Legal AI - Draft'
  })

  // Chat messages state
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'ai',
      content: `Hello! I'm your AI legal assistant. I'll help you create a ${contractData.subType.name}. Let's start by gathering some basic information. What's the name of the company being formed?`,
      timestamp: new Date()
    }
  ])

  // Contract content state
  const [contractContent, setContractContent] = useState({
    english: `
# ${contractData.subType.name}

## Article 1: Company Formation
[This section will be populated based on your requirements]

## Article 2: Company Name and Purpose
[Company details will be added here]

## Article 3: Capital and Shares
[Capital structure information]

## Article 4: Management Structure
[Management and governance details]

## Article 5: General Provisions
[Additional terms and conditions]

---
*This document is generated by DALI Legal AI and should be reviewed by qualified legal counsel.*
    `,
    arabic: `
# ${contractData.subType.name}

## المادة الأولى: تأسيس الشركة
[سيتم ملء هذا القسم بناءً على متطلباتك]

## المادة الثانية: اسم الشركة والغرض
[سيتم إضافة تفاصيل الشركة هنا]

## المادة الثالثة: رأس المال والأسهم
[معلومات هيكل رأس المال]

## المادة الرابعة: هيكل الإدارة
[تفاصيل الإدارة والحوكمة]

## المادة الخامسة: الأحكام العامة
[الشروط والأحكام الإضافية]

---
*تم إنشاء هذا المستند بواسطة DALI Legal AI ويجب مراجعته من قبل مستشار قانوني مؤهل.*
    `
  })

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const handleSendMessage = () => {
    if (!message.trim()) return

    const newMessage = {
      id: messages.length + 1,
      type: 'user',
      content: message,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, newMessage])
    setMessage('')

    // Simulate AI response
    setTimeout(() => {
      const aiResponse = {
        id: messages.length + 2,
        type: 'ai',
        content: generateAIResponse(message),
        timestamp: new Date()
      }
      setMessages(prev => [...prev, aiResponse])
      
      // Update contract content based on user input
      updateContractContent(message)
    }, 1000)
  }

  const generateAIResponse = (userMessage) => {
    // Simple AI response simulation
    if (userMessage.toLowerCase().includes('company') || userMessage.toLowerCase().includes('شركة')) {
      return "Great! I've noted the company information. Now, what will be the authorized capital of the company? Please specify the amount in Saudi Riyals."
    } else if (userMessage.toLowerCase().includes('capital') || userMessage.toLowerCase().includes('رأس المال')) {
      return "Perfect! I've updated the capital information in the contract. Who will be the founding members or shareholders of this company?"
    } else if (userMessage.toLowerCase().includes('member') || userMessage.toLowerCase().includes('مؤسس')) {
      return "Excellent! I've added the founding members information. Would you like to specify the management structure and board of directors?"
    } else {
      return "I understand. I'm updating the contract with this information. Is there anything else you'd like to add or modify in the contract?"
    }
  }

  const updateContractContent = (userInput) => {
    // Simple content update simulation
    if (userInput.toLowerCase().includes('company')) {
      const companyName = userInput.match(/company[:\s]+([^.!?]+)/i)?.[1] || 'New Company'
      setContractContent(prev => ({
        ...prev,
        english: prev.english.replace('[Company details will be added here]', `Company Name: ${companyName.trim()}`),
        arabic: prev.arabic.replace('[سيتم إضافة تفاصيل الشركة هنا]', `اسم الشركة: ${companyName.trim()}`)
      }))
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const handleFileUpload = (type, file) => {
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setContractDetails(prev => ({
          ...prev,
          [type]: e.target.result
        }))
      }
      reader.readAsDataURL(file)
    }
  }

  const renderContract = () => {
    const showBoth = language === 'both'
    const showArabic = language === 'arabic' || showBoth
    const showEnglish = language === 'english' || showBoth

    return (
      <div className="relative">
        {/* Watermark */}
        {showWatermark && (
          <div className="absolute inset-0 flex items-center justify-center pointer-events-none z-10">
            <div className="text-gray-200 text-6xl font-bold transform rotate-45 opacity-20">
              {contractDetails.watermark}
            </div>
          </div>
        )}

        {/* Header */}
        <div className="text-center mb-8 relative z-20">
          {contractDetails.companyLogo && (
            <img 
              src={contractDetails.companyLogo} 
              alt="Company Logo" 
              className="h-16 mx-auto mb-4"
            />
          )}
          <h1 className="text-2xl font-bold text-gray-900 mb-2">
            {contractDetails.title}
          </h1>
          <p className="text-gray-600">
            Effective Date: {contractDetails.effectiveDate}
          </p>
        </div>

        {/* Contract Content */}
        <div className={`relative z-20 ${showBoth ? 'grid grid-cols-2 gap-8' : ''}`}>
          {showEnglish && (
            <div className={showBoth ? 'border-r pr-4' : ''}>
              <div className="prose max-w-none">
                <pre className="whitespace-pre-wrap font-sans text-sm leading-relaxed">
                  {contractContent.english}
                </pre>
              </div>
            </div>
          )}
          
          {showArabic && (
            <div className={showBoth ? 'pl-4' : ''} dir="rtl">
              <div className="prose max-w-none">
                <pre className="whitespace-pre-wrap font-sans text-sm leading-relaxed text-right">
                  {contractContent.arabic}
                </pre>
              </div>
            </div>
          )}
        </div>

        {/* Signature Section */}
        <div className="mt-12 relative z-20">
          <h3 className="text-lg font-semibold mb-4">Signatures</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {contractDetails.parties.map((party, index) => (
              <div key={index} className="border-t pt-4">
                <div className="mb-2">
                  <Input
                    placeholder={`${party.role} Name`}
                    value={party.name}
                    onChange={(e) => {
                      const newParties = [...contractDetails.parties]
                      newParties[index].name = e.target.value
                      setContractDetails(prev => ({ ...prev, parties: newParties }))
                    }}
                    className="mb-2"
                  />
                </div>
                <div className="h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center text-gray-500">
                  {party.signature ? (
                    <img src={party.signature} alt="Signature" className="h-16" />
                  ) : (
                    <div className="text-center">
                      <Signature className="w-6 h-6 mx-auto mb-1" />
                      <span className="text-sm">Signature</span>
                    </div>
                  )}
                </div>
                <p className="text-sm text-gray-600 mt-2">{party.role}</p>
                <p className="text-sm text-gray-500">Date: _______________</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 flex">
      {/* Left Sidebar - AI Chat */}
      <div className="w-1/3 bg-white border-r border-gray-200 flex flex-col">
        {/* Chat Header */}
        <div className="p-4 border-b border-gray-200">
          <div className="flex items-center justify-between mb-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => navigate('/contracts')}
              className="mb-2"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Contracts
            </Button>
          </div>
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-500 rounded-full flex items-center justify-center">
              <Bot className="w-5 h-5 text-white" />
            </div>
            <div>
              <h3 className="font-semibold text-gray-900">AI Legal Assistant</h3>
              <p className="text-sm text-gray-600">Contract Drafting Helper</p>
            </div>
          </div>
        </div>

        {/* Contract Info */}
        <div className="p-4 bg-blue-50 border-b border-gray-200">
          <div className="flex items-center space-x-2 mb-2">
            <div className={`w-3 h-3 ${contractData.type.color} rounded-full`}></div>
            <Badge variant="secondary">{contractData.type.name}</Badge>
          </div>
          <h4 className="font-medium text-gray-900">{contractData.subType.name}</h4>
          <p className="text-sm text-gray-600">{contractData.subType.description}</p>
        </div>

        {/* Chat Messages */}
        <div className="flex-1 overflow-y-auto p-4 space-y-4">
          {messages.map((msg) => (
            <div key={msg.id} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-[80%] rounded-lg p-3 ${
                msg.type === 'user' 
                  ? 'bg-blue-600 text-white' 
                  : 'bg-gray-100 text-gray-900'
              }`}>
                <p className="text-sm">{msg.content}</p>
                <p className={`text-xs mt-1 ${
                  msg.type === 'user' ? 'text-blue-100' : 'text-gray-500'
                }`}>
                  {msg.timestamp.toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        {/* Chat Input */}
        <div className="p-4 border-t border-gray-200">
          <div className="flex items-center space-x-2 mb-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setIsRecording(!isRecording)}
              className={isRecording ? 'bg-red-50 border-red-200' : ''}
            >
              {isRecording ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
            </Button>
            <Button variant="outline" size="sm">
              <Paperclip className="w-4 h-4" />
            </Button>
          </div>
          <div className="flex space-x-2">
            <Textarea
              placeholder="Describe what you want in the contract..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              className="flex-1 min-h-[60px] resize-none"
            />
            <Button onClick={handleSendMessage} className="self-end">
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>

      {/* Right Side - Contract Preview */}
      <div className="flex-1 flex flex-col">
        {/* Document Header */}
        <div className="bg-white border-b border-gray-200 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h2 className="text-lg font-semibold text-gray-900">Contract Preview</h2>
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setLanguage('english')}
                  className={language === 'english' ? 'bg-blue-50 border-blue-200' : ''}
                >
                  English
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setLanguage('arabic')}
                  className={language === 'arabic' ? 'bg-blue-50 border-blue-200' : ''}
                >
                  العربية
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setLanguage('both')}
                  className={language === 'both' ? 'bg-blue-50 border-blue-200' : ''}
                >
                  <Languages className="w-4 h-4 mr-1" />
                  Both
                </Button>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowWatermark(!showWatermark)}
              >
                {showWatermark ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
              </Button>
              <Button variant="outline" size="sm">
                <Save className="w-4 h-4 mr-2" />
                Save
              </Button>
              <Button variant="outline" size="sm">
                <Download className="w-4 h-4 mr-2" />
                Export PDF
              </Button>
              <Button variant="outline" size="sm">
                <Share className="w-4 h-4 mr-2" />
                Share
              </Button>
            </div>
          </div>
        </div>

        {/* Contract Details Sidebar */}
        <div className="bg-gray-50 border-b border-gray-200 p-4">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Contract Title</label>
              <Input
                value={contractDetails.title}
                onChange={(e) => setContractDetails(prev => ({ ...prev, title: e.target.value }))}
                className="text-sm"
              />
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Effective Date</label>
              <Input
                type="date"
                value={contractDetails.effectiveDate}
                onChange={(e) => setContractDetails(prev => ({ ...prev, effectiveDate: e.target.value }))}
                className="text-sm"
              />
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Company Logo</label>
              <div className="flex space-x-1">
                <Input
                  type="file"
                  accept="image/*"
                  onChange={(e) => handleFileUpload('companyLogo', e.target.files[0])}
                  className="text-sm"
                />
              </div>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1 block">Watermark Text</label>
              <Input
                value={contractDetails.watermark}
                onChange={(e) => setContractDetails(prev => ({ ...prev, watermark: e.target.value }))}
                className="text-sm"
              />
            </div>
          </div>
        </div>

        {/* Document Content */}
        <div className="flex-1 overflow-y-auto p-8 bg-white">
          <div className="max-w-4xl mx-auto bg-white shadow-lg rounded-lg p-8 min-h-[800px]">
            {renderContract()}
          </div>
        </div>
      </div>
    </div>
  )
}

export default ContractDrafting

